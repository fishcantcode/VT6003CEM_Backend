services:
  backend:
    build: .
    container_name: vt6003cem_backend
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - ./.env
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - OPERATOR_SIGNUP_CODE=${OPERATOR_SIGNUP_CODE}
      - SALTROUND=${SALTROUND}
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: vt6003cem_db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: vt6003cem_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    restart: always

volumes:
  postgres_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge
